#!/bin/sh

set -e

. /usr/share/debconf/confmodule
db_version 2.0

db_get dtc-xen/conf_soap_port
conf_soap_port=$RET
db_get dtc-xen/conf_soap_login
conf_soap_login=$RET
db_get dtc-xen/conf_soap_pass
conf_soap_pass=$RET
db_get dtc-xen/conf_soap_domain_name
conf_soap_domain_name=$RET
db_get dtc-xen/conf_node_number
conf_node_number=$RET
conf_soap_hostname="node${conf_node_number}.conf_soap_domain_name"
db_get dtc-xen/conf_debian_repository
conf_debian_repository=$RET
db_get dtc-xen/conf_netmask
conf_netmask=$RET
db_get dtc-xen/conf_network
conf_network=$RET
db_get dtc-xen/conf_broadcast
conf_broadcast=$RET
db_get dtc-xen/conf_gateway
conf_gateway=$RET
db_get dtc-xen/conf_linux_kernel_name
conf_linux_kernel_name=$RET
db_get dtc-xen/conf_lvm_name
conf_lvm_name=$RET
db_get dtc-xen/conf_info_finish_setup

db_unregister dtc-xen/conf_soap_pass
db_stop

VERBOSE_INSTALL=yes

XEN_USER_HOME=/var/lib/dtc-xen/ttyssh_home
MKTEMP="mktemp -t"
OPENSSL=/usr/bin/openssl
if [ -e "/usr/bin/htpasswd" ] ;then
	HTPASSWD="/usr/bin/htpasswd"
else
	if [ -e "/usr/sbin/htpasswd2" ] ;then
		HTPASSWD="/usr/sbin/htpasswd2"
	else
		echo "Didn't find any htpasswd binary: exiting !!!"
		exit 1;
	fi
fi

DTCXEN_ETCPATH=/etc/dtc-xen

mkdir -p $DTCXEN_ETCPATH
CWD=`pwd`
cd $DTCXEN_ETCPATH

# Check if all the files of the cert are present
TEST=false
if [ ! -e $DTCXEN_ETCPATH/privkey.pem ] ; then
	TEST=true
fi
if [ ! -e $DTCXEN_ETCPATH/dtc-xen.cert.csr ] ; then
	TEST=true
fi
if [ ! -e $DTCXEN_ETCPATH/dtc-xen.cert.cert ] ; then
	 TEST=true
fi
if [ ! -e $DTCXEN_ETCPATH/dtc-xen.cert.key ] ; then
	TEST=true
fi

# Check if we have an old passphrase stored!
if [ -e ${DTCXEN_ETCPATH}/soap.conf ] ; then
	conf_ssl_passphrase=`grep soap_server_pass_phrase /etc/dtc-xen/soap.conf | cut -d"=" -f 2`
	if [ -z ""$conf_ssl_passphrase ] ; then
		echo "Detected empty password: regenerating it!"
		conf_ssl_passphrase=`dd if=/dev/random bs=64 count=1 2>|/dev/null | md5sum | cut -d' ' -f1`
	fi
	TEST=true
else
	conf_ssl_passphrase=`dd if=/dev/random bs=64 count=1 2>|/dev/null | md5sum | cut -d' ' -f1`
fi

# If one is missing, just regenerate the cert from scratch !
if [ ${TEST} = "true" ] ; then
	# If the config file exist, read the passphrase from the file
	if [ ""$VERBOSE_INSTALL = "yes" ] ;then
		echo "===> Generating SSL certs for the SOAP python server"
	fi
	rm -f $DTCXEN_ETCPATH/privkey.pem $DTCXEN_ETCPATH/dtc-xen.cert.csr $DTCXEN_ETCPATH/dtc-xen.cert.cert $DTCXEN_ETCPATH/dtc-xen.cert.key
	CERTPASS_TMP_FILE=`${MKTEMP} certfilepass.XXXXXX`  || exit 1
	echo $conf_ssl_passphrase >$CERTPASS_TMP_FILE
	OLD_UMASK=`umask`
	umask 077
	( echo "US"; echo "the-state"; echo "My-ocation"; echo "GPLHost"; echo "No-unit"; echo $conf_soap_hostname;
	echo "webmaster@"$conf_soap_hostname; echo "challenge pass";
	echo $conf_cert_organization; ) | $OPENSSL req -passout file:$CERTPASS_TMP_FILE -new > $DTCXEN_ETCPATH/dtc-xen.cert.csr
	$OPENSSL rsa -passin file:$CERTPASS_TMP_FILE -in $DTCXEN_ETCPATH/privkey.pem -out $DTCXEN_ETCPATH/dtc-xen.cert.key
	$OPENSSL x509 -in $DTCXEN_ETCPATH/dtc-xen.cert.csr -out $DTCXEN_ETCPATH/dtc-xen.cert.cert -req -signkey $DTCXEN_ETCPATH/dtc-xen.cert.key -days 3650
	umask $OLD_UMASK
	rm $CERTPASS_TMP_FILE
fi

# Generate the htpasswd file (each time, it doesn't mater)
if [ ""$VERBOSE_INSTALL = "yes" ] ;then
	echo "===> Generating $DTCXEN_ETCPATH/htpasswd file for the SOAP python server"
#	echo "$HTPASSWD -cb $DTCXEN_ETCPATH/htpasswd ${conf_soap_login} ${conf_soap_pass}"
fi
$HTPASSWD -cb $DTCXEN_ETCPATH/htpasswd ${conf_soap_login} ${conf_soap_pass}

# Create the python config file
echo "# This is the configuration file for the DTC soap server dtc-xen
# Please make soap_server_host correspond to NODE_NUM and NODE_DOMAIN_NAME in
# dtc_create_vps.conf.sh as the postinst of dtc-xen might overwrite the value
# this way
soap_server_host=node${conf_node_number}.${conf_soap_domain_name}
soap_server_port=${conf_soap_port}
soap_server_pass_phrase=${conf_ssl_passphrase}
soap_server_dtcxen_user=${conf_soap_login}
" >${DTCXEN_ETCPATH}/soap.conf

echo "#!/bin/sh
# This the configuration file for dtc-xen setup scripts (called uppon VM reinstallation)

NODE_NUM=$conf_node_number
NODE_DOMAIN_NAME=$conf_soap_domain_name
DEBIAN_REPOS=\"$conf_debian_repository\"
NETMASK=$conf_netmask
NETWORK=$conf_network
BROADCAST=$conf_broadcast
GATEWAY=$conf_gateway
LVMNAME=$conf_lvm_name

KERNELNAME=$conf_linux_kernel_name
" > ${DTCXEN_ETCPATH}/dtc_create_vps.conf.sh

chmod 600 ${DTCXEN_ETCPATH}/*

cd $CWD

# Add the group xenusers
if getent group xenusers >/dev/null ; then
	echo "Group xenusers already exists in /etc/group"
else
	echo "Add group xenusers"
	groupadd xenusers
fi

# Add the 19 users to /etc/passwd with random password if they don't exist
# Use /var/lib/dtc-xen/ttyssh_home as the homedir so problems of nsf mounted
# homes goes away.
dtcaddxenuser () {
	if getent passwd ${1} >/dev/null ; then
		echo "User already exists "${1}
	else
		echo "Adding user "${1}
		# Should be using $XEN_USER_HOME ...
		adduser --quiet --disabled-password --ingroup xenusers --home /var/lib/dtc-xen/ttyssh_home/${1} --shell /bin/dtc-xen_userconsole --gecos dtc-xen-user ${1}
	fi
	# make sure all the settings are correct as per this version of the package, and create the .ssh dir for uploading the ssh public key file
	mkdir -p "${XEN_USER_HOME}/${1}/.ssh"
	chown -R ${1}:xenusers "${XEN_USER_HOME}/${1}"
	usermod -d "${XEN_USER_HOME}/${1}" -g xenusers -s /bin/dtc-xen_userconsole ${1}
	# need to ensure /home/${1} exists
}

mkdir -p $XEN_USER_HOME
# To be replaced by: `seq -w 1 19`; do dtcaddxenuser xen$i; done
dtcaddxenuser xen01
dtcaddxenuser xen02
dtcaddxenuser xen03
dtcaddxenuser xen04
dtcaddxenuser xen05
dtcaddxenuser xen06
dtcaddxenuser xen07
dtcaddxenuser xen08
dtcaddxenuser xen09
dtcaddxenuser xen10
dtcaddxenuser xen11
dtcaddxenuser xen12
dtcaddxenuser xen13
dtcaddxenuser xen14
dtcaddxenuser xen15
dtcaddxenuser xen16
dtcaddxenuser xen17
dtcaddxenuser xen18
dtcaddxenuser xen19

#DEBHELPER#

exit 0
